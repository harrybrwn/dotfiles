"
" My .vimrc
"
" github: https://github.com/harrybrwn
"

if has("syntax")
    syntax on
endif

" Basic settings
filetype indent on
set nocompatible
set number   " 'set rnu' or 'set relativenumber' for relative line numbers
set ruler
set wrap      " wrap text that doesn't fit
set linebreak " wrap by word instead of char
set spelllang=en_us
set bs=2 " make backspace work in Insert mode
set undodir=~/.vim/undo
set undofile
set updatetime=3000 " default: 4000

set colorcolumn=80
hi ColorColumn ctermbg=0

" Tab completion
set wildmenu      " just looks nice
set wildmode=longest:full,full

" Status Line
set laststatus=2  " always show the status line
set shortmess=filnxtToOFWatc " this if for the bar below the statusline

" Tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smartindent

" History and Persistant Data
set viminfo=%,'100,<100,s100,h,n~/.vim/viminfo
set history=500
set undolevels=1500

" Searching
set path+=** " recursive file search
set hlsearch
set incsearch " get partial results while searching

" Plugins
"   :PlugInstall - install plugins
"   :PlugClean   - clean unused plugins
"   :PlugUpdate  - update plugins
if filereadable(expand('~/.vim/autoload/plug.vim'))
  call plug#begin('~/.vim/plugins')
  Plug 'airblade/vim-gitgutter'
  Plug 'altercation/vim-colors-solarized'
  Plug 'junegunn/goyo.vim'
  Plug 'reedes/vim-colors-pencil'
  Plug 'arcticicestudio/nord-vim'
  Plug 'junegunn/vim-easy-align'
  " Plug 'tpope/vim-commentary'
  Plug 'preservim/nerdcommenter'
  Plug 'fatih/vim-go'
  call plug#end()
endif

fun PluginExists(name)
  return isdirectory(expand('~/.vim/plugins/' . a:name))
endfun

fun! LoadAll()
  for p in split(globpath('~/.vim/auto/', '*.vim'), '\n')
    exe 'source ' . p
  endfor
endfun

au VimEnter * :call LoadAll()

packadd! dracula

" Colors
set t_Co=256
au ColorScheme * highlight Normal ctermbg=none
colorscheme delek " set delek as a fallback
silent! colo molokai
set background=dark
hi CursorLineNR ctermfg=magenta


" Whitespace Detection
hi ExtraWhitespace ctermbg=1 ctermfg=white
match ExtraWhitespace /\s\+$/
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call clearmatches()


" Key Maps
let mapleader=","
let g:comment_char = ''
nmap <silent><Leader>/ :call Comment(g:comment_char)<CR>
"nnoremap <Leader>/ NERDCommenterToggle
"nnoremap <Leader>/ <Leader>c<Space>
nmap <Leader>g call UpdateGitBranch()<CR>
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>
cnoremap <C-j> <C-C>
nnoremap <C-j> <Esc>

" Window Resizing
nnoremap <C-w><Up>     <C-w>-
nnoremap <C-w><C-Up>   <C-w>-
nnoremap <C-w><Down>   <C-w>+
nnoremap <C-w><C-Down> <C-w>+
nnoremap <C-PageUp>   <C-w>-
nnoremap <C-PageDown> <C-w>+
nnoremap <C-Home>     <C-w><
nnoremap <C-End>      <C-w>>

nnoremap <C-w><Left>    <C-w><
nnoremap <C-w><C-Left>  <C-w><
nnoremap <C-w><Right>   <C-w>>
nnoremap <C-w><C-Right> <C-w>>
nnoremap <silent><Leader>f :Lex<Cr>
nnoremap <silent><Leader>F :Lex!<Cr>
nnoremap <C-t> :tabnew<Cr>
nnoremap <C-n> :rightb vnew<Cr>


" Git Gutter
if PluginExists('vim-gitgutter')
  highlight SignColumn      ctermbg=none
  highlight GitGutterAdd    ctermfg=2 ctermbg=none
  highlight GitGutterChange ctermfg=3 ctermbg=none
  highlight GitGutterDelete ctermfg=1 ctermbg=none
endif

" Nerd Commenter
if PluginExists('nerdcommenter')
  let g:NERDSpaceDelims = 1
endif

" Status Line
set stl=%!MyStatusLine()

" My file-type settings
autocmd BufNewFile,BufReadPost *.clang-format set syntax=yaml
autocmd FileType make set noexpandtab
autocmd FileType make let g:comment_char = '@#'

" yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml
au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab smartindent

au FileType sshconfig setlocal ts=2 sts=2 sw=2 smartindent expandtab

" LaTex
au BufNewFile *.tex 0r ~/.vim/templates/template.tex
au FileType tex g:comment_char = '%'

" NetRW
"set noequalalways
let g:netrw_banner = 0       " hide top banner
let g:netrw_browse_split = 2 " open files in new window
let g:netrw_winsize = 20
let g:netrw_liststyle = 3    " tree
let g:netrw_altv = 1
let g:netrw_sizestyle = "H"

" Go
" :GoInstallBinaries
" :GoUpdateBinaries
if PluginExists('vim-go')
  let g:go_fmt_command = "goimports"
  let g:go_highlight_variable_assignments = 0
  let g:go_highlight_variable_declarations = 0

  let g:go_highlight_functions = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_function_parameters = 1

  let g:go_highlight_types = 0
  let g:go_highlight_structs = 0
  let g:go_highlight_fields = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_format_strings = 1

  let g:go_highlight_diagnostic_errors = 1
  let g:go_highlight_diagnostic_warnings = 1

  nmap <C-g> :GoDef<Cr>
endif
