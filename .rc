#################################\
# | |__   __ _ _ __ _ __ _   _    \
# | '_ \ / _` | '__| '__| | | |    \
# | | | | (_| | |  | |  | |_| |     \
# |_| |_|\__,_|_|  |_|   \__, |      \
#                        |___/        \
#######################################\
# github: https://github.com/harrybrwn
# website: https://hrry.me

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export EDITOR=nvim
export VISUAL=vim
export PAGER=less

IGNOREOF=10
set -o ignoreeof

# Enable colors for less and man pages
export LESS="--RAW-CONTROL-CHARS"

# Kubernetes
export KUBE_EDITOR="code -w"

# AWS cli
export AWS_PAGER=less
export AWS_DEFAULT_OUTPUT=json

# Go
export GOPATH="$HOME/dev/go"
export GOROOT="/usr/local/go"
if [ -z "$TMUX" ]; then
  PATH="$GOPATH/bin:$PATH"
  PATH="$GOROOT/bin:$PATH"
fi

[ -f "$HOME/.local/profile.d/profile.sh" ] && source "$HOME/.local/profile.d/profile.sh"
if [ -z "$TMUX" ] && [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
fi
if [ -d "$HOME/.local/share/yarn/global" ]; then
  PATH="$PATH:$HOME/.local/share/yarn/global/node_modules/.bin"
fi

export THEME_SECONDARY_COLOR='109'

if command -v exa > /dev/null 2>&1; then
  alias ls='exa --group-directories-first'
  alias l='ls -la --git'
  alias la='ls -a --group-directories-first'
else
  alias ls='ls -hN --color=auto --group-directories-first'
  alias l="ls -lAh --group-directories-first"
  alias la="ls -A --group-directories-first"
fi

# Development aliases
alias g=git m=make mi='make install'
alias cl=clear
alias dk=docker dkc='docker compose'
alias k=kubectl ku=kubectl kube=kubectl
alias tf=terraform
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn} --directories=skip'
alias jsonfmt='python3 -m json.tool'
alias re='perl -pe'
alias go-test-cover='echo "" > gocoverage.txt && go test ./... -v -cover -coverprofile=gocoverage.txt -covermode=atomic && go tool cover -html=gocoverage.txt && rm gocoverage.txt'
# My Tool aliases
alias pass=gopass
alias say=espeak wifi=wavemon
alias btc=bitcoin-cli
alias :q=exit q=exit
alias :e=vim
alias watchkube="watch 'kubectl get pods -A && printf \"%120s\n\" | sed \"s/ /-/g\" && kubectl top pods -A --sort-by memory'"
alias paths='sed "s/:/\n/g" <<< "$PATH"'
alias copy="perl -pe 'chomp if eof' | xclip -i -selection clipboard" paste="xclip -o -selection clipboard"
alias topdf='libreoffice --headless --invisible --convert-to pdf'
alias htmltopdf='wkhtmltopdf'
alias githistory='gource -a 1 -c 4.0 -f .'
alias wget='wget --hsts-file ~/.config/wget/wget-hsts'
alias screenrec='sh ~/tools/screencast.sh'
alias winbox='wine ~/.config/wine/bin/winbox.exe'
alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'
alias ipinfo='curl ipinfo.io'
alias w3c-validator='docker container run --rm -it --network host netresearch/validator-w3c'
alias nix-tree='nix run github:utdemir/nix-tree'
alias clear-buildkit-cache='docker buildx prune --filter=type=exec.cachemount --force'
alias hm=home-manager
alias fish=asciiquarium
if command -v nvim > /dev/null; then
  alias vim=nvim
fi
alias vi=vim v=vim

export COMPLETE_ALIASES="ls la l dk dkc tf k ku kube g vi vim v k"

if ! command -v qemu > /dev/null 2>&1; then
  alias qemu=qemu-system-x86_64
fi
if [ -f /opt/drawio/drawio ]; then
  alias drawio=/opt/drawio/drawio
fi

setup() {
  if [ -n "$TMUX" ]; then
    echo 'environment already setup'
    exit 1
  fi
  if tmux has-session -t 'home' 2>/dev/null; then
    tmux attach
    return
  fi
  tmux \
    new-session  -d -n misc -s misc -c ~/    \;\
    new-session  -d -n 'dev' -s dev -c ~/dev \;\
    new-session  -d -n clerk -s clerk -c ~/dev/finance/statement-viewer      \;\
      new-window -t 'clerk:2' -n 'clerk' -c ~/dev/finance/statement-viewer  \;\
      new-window -t 'clerk:3' -n 'clerk' -c ~/dev/finance/statement-viewer  \;\
      select-window -t 'clerk:1'                \;\
    new-session -d -n homelab -s homelab -c ~/dev/web/hrry.me 'nix develop' \;\
      new-window    -t 'homelab:2' -n homelab -c ~/dev/web/hrry.me \;\
      select-window -t 'homelab:1'         \;\
    new-session -n 'home' -s home -c ~/              \;\
      new-window -t 'home:2' -n 'home' -c ~/ \;\
      new-window -t 'home:3' -n 'home' -c ~/ \;\
      select-window -t 'home:1'              \;\
    select-window -t 'home:1'
}

wttr() {
  local request="https://wttr.in/"
  local args=()
  while [ $# -gt 0 ]; do
    case $1 in
      -h|--help)
        request+=':help'
        shift
        ;;
      *)
        request+="$1"
        shift
        ;;
    esac
  done
  #local request="wttr.in/"
  #local request="wttr.in/?0" # small
  #local request="wttr.in/?n" # shorter
  [ "$(tput cols)" -lt 125 ] && request+='?n'
  #echo "$request"
  curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

fsizes() {
  du -bshc $(\ls -A) | sort -rh
}

mkdircd() {
  mkdir $1 && cd $1
}

net() {
  # lspci -vv -s $(lspci | grep -i wireless | awk '{print $1}')
  # iwconfig $(iw dev | awk '/Interface /{print $2}')
  watch -n1 --color nmcli --colors yes device wifi list
}

# Because i'm scared
rm() {
  for f in "$*"; do
    if
      [ "$f" = $HOME ] ||
      [ "$f" = '~' ] ||
      [ "$f" = "/" ] ||
      [ "$f" = "/home" ]  ||
      [ "$f" = "/home/" ] ||
      [ "$f" = "$HOME/dev" ]
    then
      echo 'do not remove the home directory!!'
      return 1
    fi
  done
  /bin/rm $*
}

search() {
  lynx "https://lite.duckduckgo.com/lite?q=$*"
}

alias o=open
open() {
  case $1 in
  *.md)
    # I have a browser extention that renders markdown
    x-www-browser $*
    ;;
  *.deb)
    file-roller $*
    ;;
  *)
    xdg-open $*
    ;;
  esac
}

alias '?'=google
google() {
  local q="$*"
  if [ -z "$q" ]; then
    x-www-browser "https://www.google.com"
  else
    local query=""
    for w in $(echo "$q"); do
      if [ -n "$query" ]; then
        query="$query+$w"
      else
        query="$w"
      fi
    done
    x-www-browser "https://www.google.com/search?q=$query"
  fi
}

lines() {
  find . -name "$1" | xargs wc -l | sort -k 1n
  # (find . -name "$1" -print '%p ' | xargs -0 cat) | wc -l
}

whi() {
  readlink -f $(which $1)
}

goxxd() {
  local varname='xxdData' file='' lines=''
  local compact=false
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
      echo "Convert a file to a Go byte
slice literal.

goxxd <file> [options]
  -h --help   help
  -n <n>      number of columns
     --var    variable name"
      return 0
      ;;
    -n)
      lines="$2"
      shift 2
      ;;
    --var)
      varname="$1"
      shift
      ;;
    *)
      [ ! -z "$file" ] && echo 'Error: too many files' && return 1
      file=$1
      shift
      ;;
    esac
  done

  [ -z "$lines" ] && lines='12'
  if [ -n "$file" ] && [ -z "$varname"]; then
    varname="$(basename $file | perl -pe 's/[\.-]/_/g')"
  fi
  echo "var $varname = []byte{"
  hexdump $file -v -e "\"\t\" $lines/1 \"0x%02x, \" \"\n\"" |
    sed -e 's/0x  ,//g'
  echo "}"
}

show-colors() {
  if [ -n "$1" ]; then
    echo "\x1b[38;5;$1mcolor$1 "
    return;
  fi
  for i in {0..255}; do
    printf "\x1b[38;5;${i}mcolor%3d " $i
    if (( i%10==0&&i>0 )); then
      printf "\n"
    fi
  done
  echo ''
}

export NOTES="$HOME/.config/notes"

note() {
  [ -z "$NOTES" ] && echo 'Error: no $NOTES directory' && return 1
  local d="$NOTES"
  local file="note-$(date +%m_%d_%y).md"
  while [ $# -gt 0 ]; do
    case $1 in
    -h|--help)
      echo "Manage notes.

note <cmd> [opts...]

  flags:
    -h get help

  commands:
    n new   make a new note
    o open  open an existing note
    l list  list your notes"
      return 0
      ;;
    n|new)
      shift
      [ -n "$1" ] && d="$d/$1"
      mkdir "$d" -p
      [ -f "$d/$file" ] && echo "file already exists" && return 1
      vim -c 'call util#NewNote()' "$d/$file"
      return 0
      ;;
    o|open)
      shift
      [ -n "$1" ] && d="$d/$1"
      [ ! -f "$d/$file" ] && echo "file does not exist" && return 1
      vim "$d/note-$(date +%m_%d_%y).md"
      return 0
      ;;
    l|list)
      tree $NOTES
      return 0
      ;;
    *)
      shift
      ;;
    esac
  done
  vim -c 'r ~/.vim/templates/note.md' "$file"
}

py() {
  python3 -c "print($@)"
}

reset-mouse-speed() {
  if command -v xinput > /dev/null 2>&1; then
    xinput set-prop 'MX Master 2S Mouse' 'libinput Accel Speed' 1.0 > /dev/null 2>&1
    xinput set-prop 'MX Master 2S Mouse' 'Coordinate Transformation Matrix' \
      1.0 0.0 0.0 \
      0.0 1.0 0.0 \
      0.0 0.0 1.0 > /dev/null 2>&1
    xinput set-prop 'SYNA2B31:00 06CB:7F8B Touchpad' 'libinput Accel Speed' 1.0
    xinput set-prop 'SYNA2B31:00 06CB:7F8B Touchpad' 'Coordinate Transformation Matrix' \
      1.0 0.0 0.0 \
      0.0 1.0 0.0 \
      0.0 0.0 1.0
  fi
}

wallpaper() {
  if [ ! -f "$1" ]; then
    echo "Error no file"
    return 1
  fi
  gsettings set \
    org.gnome.desktop.background \
    picture-uri "file://$(readlink -f "$1")"
}

# Docker
export COMPOSE_DOCKER_CLI_BUILD=1

# Node Version Manager
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Grossness :(
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64/jre"
export AXIS2_HOME="$HOME/dev/claresco/tools/axis2-1.8.0"
export CATALINA_BASE="/usr/local/tomcat7"
export CATALINA_HOME="$CATALINA_BASE"
export TOMCAT_HOME="$CATALINA_HOME"
#export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib/oracle/instantclient_19_10"

source "$XDG_CONFIG_HOME/cargo/env"

export RUST_BACKTRACE=1 # 0|1|full

# pnpm
export PNPM_HOME="/home/harry/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# bun
export BUN_INSTALL="$XDG_CONFIG_HOME/bun"
export PATH="$PATH:$BUN_INSTALL/bin"

# vim: syn=sh ts=1 sts=2 sw=2
