
if has("syntax")
  syntax on
endif

source $VIMRUNTIME/defaults.vim

" Basic settings
filetype indent on
set nocompatible
set number   " 'set rnu' or 'set relativenumber' for relative line numbers
" set ruler
set spelllang=en_us
set backspace=2 " make backspace work in Insert mode (bs=2)
set undodir=~/.vim/undo
set undofile
set updatetime=3000 " default: 4000

" Text Formatting
set linebreak " wrap by word instead of char
set wrap      " wrap text that doesn't fit
" set formatoptions=jcroql
set formatoptions=tcqj

set colorcolumn=80

" Tab completion
set wildmenu      " get suggesions on <tab>
set wildmode=longest:full,full

" Status Line
set laststatus=2  " always show the status line
set noshowmode
set shortmess=filnxtToOFWatc " this if for the bar below the statusline

" Tab settings
set tabstop=4     " ts
set shiftwidth=4  " sw
set softtabstop=4 " sts
set expandtab     " et
set smartindent   " si
set smarttab      " sta

" History and Persistant Data
set viminfo=%,'100,<100,s100,h,n~/.vim/viminfo/viminfo " global paste (with p)
set history=500
set undolevels=1500

" Searching
set path=,.** " recursive file search
set hlsearch
set incsearch " get partial results while searching

" Windows
set splitright
set splitbelow

" stop vim from adding a newline at the end
set nofixendofline

set mouse= " disable mouse
" set virtualedit=all " move around freely in the buffer

" Plugins
"   :PlugInstall - install plugins
"   :PlugClean   - clean unused plugins
"   :PlugUpdate  - update plugins
if filereadable(expand('~/.vim/autoload/plug.vim'))
  call plug#begin('~/.vim/plugins')
  " Functionality
  Plug 'junegunn/vim-easy-align' " auto markdown table alignment
  Plug 'junegunn/goyo.vim'       " distration free mode
  Plug 'preservim/nerdcommenter' " code commenting

  " Languages
  Plug 'fatih/vim-go' " Golang
  Plug 'sheerun/vim-polyglot'
  Plug 'jjo/vim-cue'

  " Themeing
  Plug 'itchyny/lightline.vim'
  Plug 'morhetz/gruvbox'
  Plug 'reedes/vim-colors-pencil'
  Plug 'arcticicestudio/nord-vim'
  Plug 'altercation/vim-colors-solarized'
  Plug 'vim-pandoc/vim-pandoc'
  Plug 'vim-pandoc/vim-pandoc-syntax'

  Plug 'preservim/nerdtree'

  " Plugins to look into:
  " - 'editorconfig/editorconfig-vim' universal editor config
  " - 'ycm-core/YouCompleteMe' completion
  " - 'exu/pgsql.vim' gives postgres specific sql syntax
  " - 'airblade/vim-gitgutter'
  " - 'vim-airline/vim-airline'
  call plug#end()
endif

packadd! dracula

" Colors
au ColorScheme * hi Normal ctermbg=none
colorscheme delek " set delek as a fallback
" silent! colo molokai
silent! colo gruvbox
silent! color grey
set background=dark
hi CursorLineNR ctermfg=magenta
hi ColorColumn ctermbg=0
hi Normal ctermbg=none


" Trailing Whitespace Detection
hi ExtraWhitespace ctermbg=8 ctermfg=white
match ExtraWhitespace /\s\+$/
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call clearmatches()


" Key Maps
let mapleader=","
nmap <Leader>/ <Plug>NERDCommenterToggle
xmap <Leader>/ <Plug>NERDCommenterToggle

nnoremap <silent><Leader>g :Goyo<Cr>
nnoremap <Leader>r :so ~/.vim/vimrc<cr>

" Remapping CTRL-j to Esc
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>
cnoremap <C-j> <C-C>
nnoremap <C-j> <Esc>

" Window Resizing
nnoremap <C-w><Up>     <C-w>-
nnoremap <C-w><C-Up>   <C-w>-
nnoremap <C-w><Down>   <C-w>+
nnoremap <C-w><C-Down> <C-w>+
nnoremap <C-PageUp>   2<C-w>-
nnoremap <C-PageDown> 2<C-w>+
nnoremap <C-Home>     2<C-w><
nnoremap <C-End>      2<C-w>>

nnoremap <C-w><Left>    <C-w><
nnoremap <C-w><C-Left>  <C-w><
nnoremap <C-w><Right>   <C-w>>
nnoremap <C-w><C-Right> <C-w>>
nnoremap <C-t> :tabnew<Cr>
" File Tree mappings
nnoremap <silent><Leader>f :NERDTreeToggle<Cr>
" nnoremap <silent><Leader>f :Lex<Cr>
" nnoremap <silent><Leader>F :Lex!<Cr>

nnoremap <Leader>d :r!date<Cr><C-c>I<BS><Esc>

" Git Gutter
if util#PluginExists('vim-gitgutter')
  highlight SignColumn      ctermbg=none
  highlight GitGutterAdd    ctermfg=2 ctermbg=none
  highlight GitGutterChange ctermfg=3 ctermbg=none
  highlight GitGutterDelete ctermfg=1 ctermbg=none
endif

" Nerd Commenter
if util#PluginExists('nerdcommenter')
  let g:NERDSpaceDelims = 1
endif


" Status bar color
let g:lightline = {'colorscheme': 'Tomorrow_Night'}


" My custom file-type settings
autocmd BufNewFile,BufReadPost *.clang-format set syntax=yaml
autocmd FileType make set noexpandtab

" Go
" au BufNewFile,BufReadPost *.go inoremap . .<C-x><C-o>
au FileType go inoremap {<Cr> {<Cr>}<Esc>O

" yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml
au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab smartindent
" ssh
au FileType sshconfig setlocal ts=2 sts=2 sw=2 smartindent expandtab
" LaTex
au BufNewFile *.tex 0r ~/.vim/templates/template.tex
" Spelling
au BufNewFile,BufReadPost *.txt set spell
au BufRead,BufNewFile *.fql set filetype=ferret_fql

" C++
au FileType cpp inoremap {<Cr> {<Cr>}<Esc>O

" NetRW
"set noequalalways
let g:netrw_banner = 0       " hide top banner
" let g:netrw_browse_split = 2 " open files in new window
let g:netrw_winsize = 20
let g:netrw_liststyle = 3    " tree
" let g:netrw_altv = 1
let g:netrw_sizestyle = "H"

" Go
" :GoInstallBinaries
" :GoUpdateBinaries
if util#PluginExists('vim-go')
  let g:go_fmt_command = "goimports"
  let g:go_highlight_variable_assignments = 0
  let g:go_highlight_variable_declarations = 0

  let g:go_highlight_functions = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_function_parameters = 1

  let g:go_highlight_types = 0
  let g:go_highlight_structs = 0
  let g:go_highlight_fields = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_format_strings = 1

  let g:go_highlight_diagnostic_errors = 1
  let g:go_highlight_diagnostic_warnings = 1

  nmap <C-g> :GoDef<Cr>
endif

if util#PluginExists('goyo.vim')
  " let g:goyo_width = 120
  " let g:goyo_margin_top = 10
  " let g:goyo_margin_bottom = 10
endif

if util#PluginExists('vim-pandoc')
  " au FileType pandoc set syn=markdown
  au FileType pandoc set syn=pandoc
  au FileType pandoc set textwidth=80
  let g:pandoc#modules#disabled = ["folding"]
  " Todo files
  au BufNewFile TODO set filetype=pandoc
endif

