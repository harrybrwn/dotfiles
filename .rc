#################################\
# | |__   __ _ _ __ _ __ _   _    \
# | '_ \ / _` | '__| '__| | | |    \
# | | | | (_| | |  | |  | |_| |     \
# |_| |_|\__,_|_|  |_|   \__, |      \
#                        |___/        \
#######################################\
# github: https://github.com/harrybrwn
# website: https://hrry.me

# If not running interactively, don't do anything
[[ $- != *i* ]] && return
[[ -d /sbin && ":$PATH:" != *":/sbin:"* ]] && PATH="/sbin:$PATH"

[ -f "$HOME/.local/profile.d/profile.sh" ] && source "$HOME/.local/profile.d/profile.sh"

export PAGER=less
if command -v nvim > /dev/null; then
  export EDITOR=nvim
  export VISUAL=nvim
else
  export EDITOR=vim
  export VISUAL=vim
fi

IGNOREOF=10
set -o ignoreeof

# Enable colors for less and man pages
export LESS="--RAW-CONTROL-CHARS"

# Kubernetes
export KUBE_EDITOR="nvim"

# AWS cli
export AWS_PAGER=less
export AWS_DEFAULT_OUTPUT=json

# Go
export GOPATH="$HOME/dev/go"
export GOROOT="/usr/local/go"
[[ -d "$GOPATH" && ":${PATH}:" != *":${GOPATH}/bin:"* ]] && PATH="$GOPATH/bin:$PATH"
[[ -d "$GOROOT" && ":${PATH}:" != *":${GOROOT}/bin:"* ]] && PATH="$GOROOT/bin:$PATH"

# Rust
[ -x /usr/bin/sccache ] && export RUSTC_WRAPPER=/usr/bin/sccache

export THEME_SECONDARY_COLOR='109'

if command -v eza > /dev/null 2>&1; then
  alias ls='eza --group-directories-first --time-style "+%d %b %H:%M:%S"'
  alias l='ls -la --git'
  alias la='ls -a --group-directories-first'
elif command -v exa > /dev/null 2>&1; then
  alias ls='exa --group-directories-first'
  alias l='ls -la --git'
  alias la='ls -a --group-directories-first'
else
  alias ls='ls -hN --color=auto --group-directories-first'
  alias l="ls -lAh --group-directories-first"
  alias la="ls -A --group-directories-first"
fi

# Development aliases
alias g=git m=make mi='make install'
alias cl=clear
alias dk=docker dkc='docker compose'
alias k=kubectl ku=kubectl kube=kubectl
alias tf=terraform
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn} --directories=skip'
alias jsonfmt='python3 -m json.tool'
alias re='perl -pe'
alias go-test-cover='echo "" > gocoverage.txt && go test ./... -v -cover -coverprofile=gocoverage.txt -covermode=atomic && go tool cover -html=gocoverage.txt && rm gocoverage.txt'
# My Tool aliases
alias say=espeak wifi=wavemon
alias :q=exit q=exit
alias :e=vim
alias watchkube="watch 'kubectl get pods -A && printf \"%120s\n\" | sed \"s/ /-/g\" && kubectl top pods -A --sort-by memory'"
alias paths='sed "s/:/\n/g" <<< "$PATH"'
alias copy="perl -pe 'chomp if eof' | xclip -i -selection clipboard" paste="xclip -o -selection clipboard"
alias topdf='libreoffice --headless --invisible --convert-to pdf'
alias htmltopdf='wkhtmltopdf'
alias githistory='gource -a 1 -c 4.0 -f .'
alias wget='wget --hsts-file ~/.config/wget/wget-hsts'
alias screenrec='sh ~/tools/screencast.sh'
alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'
alias ipinfo='curl ipinfo.io'
alias w3c-validator='docker container run --rm -it --network host netresearch/validator-w3c'
alias nix-tree='nix run github:utdemir/nix-tree'
alias clear-buildkit-cache='docker buildx prune --filter=type=exec.cachemount --force'
alias hm=home-manager
alias fish=asciiquarium
alias nvidia-xconfig='echo "do not use that trash"'
if command -v nvim > /dev/null; then
  alias vim=nvim
fi
alias vi=vim v=vim
alias pwgen=xkcdpass

export COMPLETE_ALIASES="ls la l dk dkc tf k ku kube g vi vim v k"

if ! command -v qemu > /dev/null 2>&1; then
  alias qemu=qemu-system-x86_64
fi
if [ -f /opt/drawio/drawio ]; then
  alias drawio=/opt/drawio/drawio
fi

# Docker
export COMPOSE_DOCKER_CLI_BUILD=1
export BUILDX_BAKE_ENTITLEMENTS_FS=0
export DOCKER_BUILDKIT=1

# Node Version Manager (nvm)
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Python environment
if [[ -x "$XDG_DATA_HOME/venv/bin/pip" && -x "$XDG_DATA_HOME/venv/bin/python" ]]; then
  [[ ":${PATH}:" != *":$XDG_DATA_HOME/venv/bin:"* ]] && PATH="$XDG_DATA_HOME/venv/bin:$PATH"
fi

setup() {
  t-new() {
    declare -a tflags=('-A') # attach only if session already exists
    declare -a args=()
    if [ -n "$TMUX" ]; then
      tflags+=('-d') # detach after creating session
    fi
    local s=""
    while [ $# -gt 0 ]; do
      case "$1" in
        -s) s="$2";        shift 2 ;;
        *)  args+=("$1"); shift   ;;
      esac
    done
    tmux new-session "${tflags[@]}" -s "$s" "${args[@]}"
    [ -n "$TMUX" ] && tmux switch-client -t "$s"
  }

  case "$1" in
    help|--help|-h)
      cat <<-EOF
setup [target|command]

Targets
  at
  dev
  homelab
  clerk

Commands
  help    print this help message
EOF
      ;;
    at)
      t-new -s at -n at -c ~/dev/bsky/at \;\
        new-window    -t 'at:2' -n at -c ~/dev/bsky/at \;\
        new-window    -t 'at:3' -n at -c ~/dev/bsky/at \;\
        select-window -t 'at:1'
      ;;
    dev)
      t-new -s dev -n dev -c ~/dev
      ;;
    homelab|lab)
      t-new -s homelab -n homelab -c ~/dev/web/hrry.me \;\
        new-window    -t 'homelab:2' -n homelab -c ~/dev/web/hrry.me \;\
        new-window    -t 'homelab:3' -n homelab -c ~/dev/web/hrry.me \;\
        select-window -t 'homelab:1'
      ;;
    clerk)
      t-new -s clerk -n clerk -c ~/dev/finance/clerk \;\
        new-window -t 'clerk:2' -n 'clerk' -c ~/dev/finance/clerk \;\
        new-window -t 'clerk:3' -n 'clerk' -c ~/dev/finance/clerk \;\
        select-window -t 'clerk:1'
      ;;
    '')
      if tmux has-session -t 'home' 2>/dev/null; then
        if [ -n "$TMUX" ]; then
          echo 'Error: already inside the default session' >&2
          return 1
        else
          exec tmux attach -t home
          return 0
        fi
      fi
      tmux \
        new-session -d -n misc   -s misc -c ~    \;\
        new-session -d -n 'dev'  -s dev -c ~/dev \;\
        new-session    -n 'home' -s home -c ~    \;\
          new-window -t 'home:2' -n 'home' -c ~  \;\
          new-window -t 'home:3' -n 'home' -c ~  \;\
          select-window -t 'home:1'              \;\
        select-window -t 'home:1'
      ;;
    *)
      echo "Error: unknown session name \"$1\"" >&2
      return 1
      ;;
  esac
}

# Because i'm scared
rm() {
  for f in "$*"; do
    if
      [ "$f" = $HOME ] ||
      [ "$f" = '~' ] ||
      [ "$f" = "/" ] ||
      [ "$f" = "/home" ]  ||
      [ "$f" = "/home/" ] ||
      [ "$f" = "$HOME/dev" ]
    then
      echo 'do not remove the home directory!!'
      return 1
    fi
  done
  /bin/rm $*
}

search() {
  lynx "https://lite.duckduckgo.com/lite?q=$*"
}

alias o=open
open() {
  case $1 in
  *.md)
    # I have a browser extention that renders markdown
    x-www-browser $*
    ;;
  *.deb)
    file-roller $*
    ;;
  *)
    xdg-open $*
    ;;
  esac
}

alias '?'=google
google() {
  local q="$*"
  if [ -z "$q" ]; then
    x-www-browser "https://www.google.com"
  else
    local query=""
    for w in $(echo "$q"); do
      if [ -n "$query" ]; then
        query="$query+$w"
      else
        query="$w"
      fi
    done
    x-www-browser "https://www.google.com/search?q=$query"
  fi
}

lines() {
  find . -name "$1" | xargs wc -l | sort -k 1n
  # (find . -name "$1" -print '%p ' | xargs -0 cat) | wc -l
}

whi() {
  readlink -f $(which $1)
}

goxxd() {
  local varname='xxdData' file='' lines=''
  local compact=false
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
      echo "Convert a file to a Go byte
slice literal.

goxxd <file> [options]
  -h --help   help
  -n <n>      number of columns
     --var    variable name"
      return 0
      ;;
    -n)
      lines="$2"
      shift 2
      ;;
    --var)
      varname="$1"
      shift
      ;;
    *)
      [ ! -z "$file" ] && echo 'Error: too many files' && return 1
      file=$1
      shift
      ;;
    esac
  done

  [ -z "$lines" ] && lines='12'
  if [ -n "$file" ] && [ -z "$varname"]; then
    varname="$(basename $file | perl -pe 's/[\.-]/_/g')"
  fi
  echo "var $varname = []byte{"
  hexdump $file -v -e "\"\t\" $lines/1 \"0x%02x, \" \"\n\"" |
    sed -e 's/0x  ,//g'
  echo "}"
}

export NOTES="$HOME/.config/notes"

note() {
  [ -z "$NOTES" ] && echo 'Error: no $NOTES directory' && return 1
  local d="$NOTES"
  local file="note-$(date +%m_%d_%y).md"
  while [ $# -gt 0 ]; do
    case $1 in
    -h|--help)
      echo "Manage notes.

note <cmd> [opts...]

  flags:
    -h get help

  commands:
    n new   make a new note
    o open  open an existing note
    l list  list your notes"
      return 0
      ;;
    n|new)
      shift
      [ -n "$1" ] && d="$d/$1"
      mkdir "$d" -p
      [ -f "$d/$file" ] && echo "file already exists" && return 1
      vim -c 'call util#NewNote()' "$d/$file"
      return 0
      ;;
    o|open)
      shift
      [ -n "$1" ] && d="$d/$1"
      [ ! -f "$d/$file" ] && echo "file does not exist" && return 1
      vim "$d/note-$(date +%m_%d_%y).md"
      return 0
      ;;
    l|list)
      tree $NOTES
      return 0
      ;;
    *)
      shift
      ;;
    esac
  done
  vim -c 'r ~/.vim/templates/note.md' "$file"
}

py() {
  python3 -c "print($@)"
}

wallpaper() {
  if [ ! -f "$1" ]; then
    echo "Error no file"
    return 1
  fi
  gsettings set \
    org.gnome.desktop.background \
    picture-uri "file://$(readlink -f "$1")"
}

# vim: ft=bash syntax=bash ts=1 sts=2 sw=2
