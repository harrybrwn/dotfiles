"
" My .vimrc
"
" github: https://github.com/harrybrwn
"

if has("syntax")
    syntax on
endif

" Basic settings
filetype indent on
set nocompatible
set number   " 'set rnu' or 'set relativenumber' for relative line numbers
set ruler
set wrap      " wrap text that doesn't fit
set linebreak " wrap by word instead of char
set spelllang=en_us
set bs=2 " make backspace work in Insert mode

" Tab completion
set wildmenu      " just looks nice
set wildmode=longest:full,full

" Status Line
set laststatus=2  " always show the status line
set shortmess=filnxtToOFWatc

" Tab settings
set tabstop=4
set expandtab
set shiftwidth=4
set softtabstop=4
set smartindent

" History and Persistant Data
set viminfo=%,'100,<100,s100,h,n~/.vim/viminfo
set history=500
set undolevels=1500

" Searching
set path+=** " recursive file search
set hlsearch
set incsearch


" Plugin Managment
"
"    :PluginList         - list all plugins
"    :PluginUpdate       - update plugins
"    :PluginInstall      - install plugins
"    :PluginSearch foo   - search for 'foo'
"    :PluginClean        - clean out unused plugins
"
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'altercation/vim-colors-solarized'
Plugin 'junegunn/goyo.vim'
Plugin 'reedes/vim-colors-pencil'
Plugin 'arcticicestudio/nord-vim'
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'junegunn/vim-easy-align'
" Plugin 'tpope/vim-commentary'
Plugin 'preservim/nerdcommenter'
call vundle#end()
filetype plugin indent on


" Colors
set t_Co=256
set background=dark
au ColorScheme * highlight Normal ctermbg=none
silent! colorscheme delek
silent! colorscheme dracula " allow failures (set delek as default)
hi CursorLineNR ctermfg=magenta
hi SpellBad cterm=underline ctermbg=none ctermfg=none


" Whitespace Detection
highlight ExtraWhitespace ctermbg=1 ctermfg=white
match ExtraWhitespace /\s\+$/
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call clearmatches()


" Key Maps
let mapleader=","
let g:comment_char = ''
nmap <silent><Leader>/ :call Comment(g:comment_char)<CR>
nmap <Leader>g call UpdateGitBranch()<CR>
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>
cnoremap <C-j> <C-C>
nnoremap <C-j> <Esc>
inoremap jk <Esc>

" Window Resizing
nnoremap <C-w><Up>     <C-w>-
nnoremap <C-w><C-Up>   <C-w>-
nnoremap <C-w><Down>   <C-w>+
nnoremap <C-w><C-Down> <C-w>+

nnoremap <C-w><Left>    <C-w><
nnoremap <C-w><C-Left>  <C-w><
nnoremap <C-w><Right>   <C-w>>
nnoremap <C-w><C-Right> <C-w>>


" Git Gutter
highlight SignColumn      ctermbg=none
highlight GitGutterAdd    ctermfg=2 ctermbg=none
highlight GitGutterChange ctermfg=3 ctermbg=none
highlight GitGutterDelete ctermfg=1 ctermbg=none

" Nerd Commenter
let g:NERDSpaceDelims = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Status Line
source ~/.vim/status.vim
set stl=%!MyStatusLine()

" My file-type settings
autocmd BufNewFile,BufReadPost *.clang-format set syntax=yaml
autocmd FileType make set noexpandtab
autocmd FileType make let g:comment_char = '@#'

" yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml
au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab smartindent

" My Notes
au BufNewFile,BufReadPost *.note set filetype=note
au FileType note setlocal syn=yaml ts=2 sts=2 sw=2 smartindent expandtab
au FileType sshconfig setlocal ts=2 sts=2 sw=2 smartindent expandtab

function Linecomment()
    execute "normal ^i/*\<ESC>$a*/\<ESC>"
endfunction
command Linecomment call Linecomment()
